{"ast":null,"code":"import express from \"express\";\nimport Medicine from \"../models/Medicine.js\";\nconst router = express.Router();\n\n/**\r\n * @route   POST /api/medicines\r\n * @desc    Add new medicine\r\n */\nrouter.post(\"/\", async (req, res) => {\n  try {\n    const newMedicine = new Medicine(req.body);\n    await newMedicine.save();\n    res.status(201).json(newMedicine);\n  } catch (error) {\n    res.status(500).json({\n      message: \"Server error\",\n      error: error.message\n    });\n  }\n});\n\n/**\r\n * @route   GET /api/medicines\r\n * @desc    Get all medicines\r\n */\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const medicines = await Medicine.find();\n    res.json(medicines);\n  } catch (error) {\n    res.status(500).json({\n      message: \"Server error\",\n      error: error.message\n    });\n  }\n});\n\n/**\r\n * @route   GET /api/medicines/search\r\n * @desc    Search medicines by name, category, or symptoms/disease\r\n */\nrouter.get(\"/search\", async (req, res) => {\n  try {\n    const {\n      name,\n      category,\n      symptom\n    } = req.query;\n    const query = {};\n    if (name) {\n      query.name = {\n        $regex: name,\n        $options: \"i\"\n      }; // case insensitive search\n    }\n    if (category) {\n      query.category = {\n        $regex: category,\n        $options: \"i\"\n      };\n    }\n    if (symptom) {\n      query.symptoms = {\n        $regex: symptom,\n        $options: \"i\"\n      };\n    }\n    const medicines = await Medicine.find(query);\n    res.json(medicines);\n  } catch (error) {\n    res.status(500).json({\n      message: \"Server error\",\n      error: error.message\n    });\n  }\n});\n// DELETE all medicines\nrouter.delete(\"/\", async (req, res) => {\n  try {\n    await Medicine.deleteMany({});\n    res.status(200).json({\n      message: \"All medicines deleted successfully\"\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: \"Failed to delete medicines\"\n    });\n  }\n});\nrouter.delete(\"/:id\", async (req, res) => {\n  try {\n    await Medicine.findByIdAndDelete(req.params.id);\n    res.status(200).json({\n      message: \"Medicine deleted successfully\"\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: \"Failed to delete medicine\"\n    });\n  }\n});\n// POST /api/medicines/byIds  { ids: [\"...\", \"...\"] }\nrouter.post(\"/byIds\", async (req, res) => {\n  try {\n    const {\n      ids\n    } = req.body;\n    if (!Array.isArray(ids) || ids.length === 0) return res.status(400).json({\n      message: \"ids array required\"\n    });\n    const meds = await Medicine.find({\n      _id: {\n        $in: ids\n      }\n    });\n    res.json(meds);\n  } catch (e) {\n    res.status(500).json({\n      message: e.message\n    });\n  }\n});\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const {\n      name,\n      category,\n      symptom\n    } = req.query;\n    let query = {};\n    if (name) query.name = {\n      $regex: name,\n      $options: \"i\"\n    };\n    if (category) query.category = category;\n    if (symptom) query.symptom = symptom;\n    const medicines = await Medicine.find(query);\n    res.json(medicines);\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});\n\n// routes/medicineRoutes.js\nrouter.get(\"/search\", async (req, res) => {\n  try {\n    const query = req.query.q || \"\";\n    if (!query) {\n      return res.json([]); // If query is empty, return nothing\n    }\n    const medicines = await Medicine.find({\n      $or: [{\n        name: {\n          $regex: query,\n          $options: \"i\"\n        }\n      },\n      // partial match on name\n      {\n        category: {\n          $regex: query,\n          $options: \"i\"\n        }\n      },\n      // partial match on category\n      {\n        symptoms: {\n          $regex: query,\n          $options: \"i\"\n        }\n      } // partial match on symptoms\n      ]\n    });\n    res.json(medicines);\n  } catch (error) {\n    res.status(500).json({\n      message: \"Error fetching medicines\",\n      error\n    });\n  }\n});\nexport default router;","map":{"version":3,"names":["express","Medicine","router","Router","post","req","res","newMedicine","body","save","status","json","error","message","get","medicines","find","name","category","symptom","query","$regex","$options","symptoms","delete","deleteMany","findByIdAndDelete","params","id","ids","Array","isArray","length","meds","_id","$in","e","err","q","$or"],"sources":["C:/Users/SONA/OneDrive/Desktop/Mini Project/mediq/frontend/src/components/MedicineSearch.js"],"sourcesContent":["import express from \"express\";\r\nimport Medicine from \"../models/Medicine.js\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @route   POST /api/medicines\r\n * @desc    Add new medicine\r\n */\r\nrouter.post(\"/\", async (req, res) => {\r\n  try {\r\n    const newMedicine = new Medicine(req.body);\r\n    await newMedicine.save();\r\n    res.status(201).json(newMedicine);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Server error\", error: error.message });\r\n  }\r\n});\r\n\r\n/**\r\n * @route   GET /api/medicines\r\n * @desc    Get all medicines\r\n */\r\nrouter.get(\"/\", async (req, res) => {\r\n  try {\r\n    const medicines = await Medicine.find();\r\n    res.json(medicines);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Server error\", error: error.message });\r\n  }\r\n});\r\n\r\n/**\r\n * @route   GET /api/medicines/search\r\n * @desc    Search medicines by name, category, or symptoms/disease\r\n */\r\nrouter.get(\"/search\", async (req, res) => {\r\n  try {\r\n    const { name, category, symptom } = req.query;\r\n\r\n    const query = {};\r\n\r\n    if (name) {\r\n      query.name = { $regex: name, $options: \"i\" }; // case insensitive search\r\n    }\r\n    if (category) {\r\n      query.category = { $regex: category, $options: \"i\" };\r\n    }\r\n    if (symptom) {\r\n      query.symptoms = { $regex: symptom, $options: \"i\" };\r\n    }\r\n\r\n    const medicines = await Medicine.find(query);\r\n    res.json(medicines);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Server error\", error: error.message });\r\n  }\r\n});\r\n// DELETE all medicines\r\nrouter.delete(\"/\", async (req, res) => {\r\n  try {\r\n    await Medicine.deleteMany({});\r\n    res.status(200).json({ message: \"All medicines deleted successfully\" });\r\n  } catch (error) {\r\n    res.status(500).json({ error: \"Failed to delete medicines\" });\r\n  }\r\n});\r\nrouter.delete(\"/:id\", async (req, res) => {\r\n  try {\r\n    await Medicine.findByIdAndDelete(req.params.id);\r\n    res.status(200).json({ message: \"Medicine deleted successfully\" });\r\n  } catch (error) {\r\n    res.status(500).json({ error: \"Failed to delete medicine\" });\r\n  }\r\n});\r\n// POST /api/medicines/byIds  { ids: [\"...\", \"...\"] }\r\nrouter.post(\"/byIds\", async (req, res) => {\r\n  try {\r\n    const { ids } = req.body;\r\n    if (!Array.isArray(ids) || ids.length === 0)\r\n      return res.status(400).json({ message: \"ids array required\" });\r\n    const meds = await Medicine.find({ _id: { $in: ids } });\r\n    res.json(meds);\r\n  } catch (e) {\r\n    res.status(500).json({ message: e.message });\r\n  }\r\n});\r\nrouter.get(\"/\", async (req, res) => {\r\n  try {\r\n    const { name, category, symptom } = req.query;\r\n\r\n    let query = {};\r\n    if (name) query.name = { $regex: name, $options: \"i\" };\r\n    if (category) query.category = category;\r\n    if (symptom) query.symptom = symptom;\r\n\r\n    const medicines = await Medicine.find(query);\r\n    res.json(medicines);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n});\r\n\r\n\r\n// routes/medicineRoutes.js\r\nrouter.get(\"/search\", async (req, res) => {\r\n  try {\r\n    const query = req.query.q || \"\";\r\n\r\n    if (!query) {\r\n      return res.json([]); // If query is empty, return nothing\r\n    }\r\n\r\n    const medicines = await Medicine.find({\r\n      $or: [\r\n        { name: { $regex: query, $options: \"i\" } },      // partial match on name\r\n        { category: { $regex: query, $options: \"i\" } },  // partial match on category\r\n        { symptoms: { $regex: query, $options: \"i\" } }   // partial match on symptoms\r\n      ]\r\n    });\r\n\r\n    res.json(medicines);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error fetching medicines\", error });\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}