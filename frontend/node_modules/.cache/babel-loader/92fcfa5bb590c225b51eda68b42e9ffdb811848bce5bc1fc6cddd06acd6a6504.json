{"ast":null,"code":"import axios from \"axios\";\nconst baseURL = typeof process.env.REACT_APP_API_URL === \"string\" && process.env.REACT_APP_API_URL.trim() ? process.env.REACT_APP_API_URL.trim() : \"http://localhost:5000/api\";\nconst api = axios.create({\n  baseURL,\n  withCredentials: true\n});\n\n// ✅ Automatically handle headers\napi.interceptors.request.use(config => {\n  var _config$headers$Conte;\n  config.headers[\"Accept\"] = \"application/json\";\n  const isFormData = config.data instanceof FormData;\n  const isMultipart = (_config$headers$Conte = config.headers[\"Content-Type\"]) === null || _config$headers$Conte === void 0 ? void 0 : _config$headers$Conte.includes(\"multipart/form-data\");\n  if (!isFormData && !isMultipart) {\n    config.headers[\"Content-Type\"] = \"application/json\";\n  }\n  return config;\n});\n\n// ✅ Global error logging\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  console.error(\"API error:\", (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","baseURL","process","env","REACT_APP_API_URL","trim","api","create","withCredentials","interceptors","request","use","config","_config$headers$Conte","headers","isFormData","data","FormData","isMultipart","includes","response","error","_error$response","console","message","Promise","reject"],"sources":["C:/Users/SONA/OneDrive/Desktop/Mini Project/mediq/frontend/src/api/axios.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst baseURL =\r\n  typeof process.env.REACT_APP_API_URL === \"string\" && process.env.REACT_APP_API_URL.trim()\r\n    ? process.env.REACT_APP_API_URL.trim()\r\n    : \"http://localhost:5000/api\";\r\n\r\nconst api = axios.create({\r\n  baseURL,\r\n  withCredentials: true,\r\n});\r\n\r\n// ✅ Automatically handle headers\r\napi.interceptors.request.use(config => {\r\n  config.headers[\"Accept\"] = \"application/json\";\r\n\r\n  const isFormData = config.data instanceof FormData;\r\n  const isMultipart = config.headers[\"Content-Type\"]?.includes(\"multipart/form-data\");\r\n\r\n  if (!isFormData && !isMultipart) {\r\n    config.headers[\"Content-Type\"] = \"application/json\";\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\n// ✅ Global error logging\r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    console.error(\"API error:\", error?.response?.data || error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GACX,OAAOC,OAAO,CAACC,GAAG,CAACC,iBAAiB,KAAK,QAAQ,IAAIF,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAACC,IAAI,CAAC,CAAC,GACrFH,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAACC,IAAI,CAAC,CAAC,GACpC,2BAA2B;AAEjC,MAAMC,GAAG,GAAGN,KAAK,CAACO,MAAM,CAAC;EACvBN,OAAO;EACPO,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EAAA,IAAAC,qBAAA;EACrCD,MAAM,CAACE,OAAO,CAAC,QAAQ,CAAC,GAAG,kBAAkB;EAE7C,MAAMC,UAAU,GAAGH,MAAM,CAACI,IAAI,YAAYC,QAAQ;EAClD,MAAMC,WAAW,IAAAL,qBAAA,GAAGD,MAAM,CAACE,OAAO,CAAC,cAAc,CAAC,cAAAD,qBAAA,uBAA9BA,qBAAA,CAAgCM,QAAQ,CAAC,qBAAqB,CAAC;EAEnF,IAAI,CAACJ,UAAU,IAAI,CAACG,WAAW,EAAE;IAC/BN,MAAM,CAACE,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB;EACrD;EAEA,OAAOF,MAAM;AACf,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACG,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC3BS,QAAQ,IAAIA,QAAQ,EACpBC,KAAK,IAAI;EAAA,IAAAC,eAAA;EACPC,OAAO,CAACF,KAAK,CAAC,YAAY,EAAE,CAAAA,KAAK,aAALA,KAAK,wBAAAC,eAAA,GAALD,KAAK,CAAED,QAAQ,cAAAE,eAAA,uBAAfA,eAAA,CAAiBN,IAAI,KAAIK,KAAK,CAACG,OAAO,CAAC;EACnE,OAAOC,OAAO,CAACC,MAAM,CAACL,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAef,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}